name: build-sunxi-cortexa7-ImmortalWrt-24.10.0

on:
  workflow_dispatch:
    inputs:
      profile:
        type: choice
        description: |
          select a device modelï¼š
        required: true
        options:  
          - friendlyarm_nanopi-r1
          - xunlong_orangepi-zero
        default: 'friendlyarm_nanopi-r1'
      rootfs_partsize:
        description: 'Setting the partsize of software packages (MB)'
        required: true
        default: '1024'
      wlan_name:
        description: 'Setting a name for the WiFi ssid'
        required: true
        default: 'Protable-JAS-Router'
      wlan_password:
        description: 'Setting a password for accessing the WiFi'
        required: true
        default: '12345678'
      enable_pppoe:
        type: choice
        description: "Do you want to preset a PPPoE virtual dial-up?"
        required: true
        options:
        - 'yes'
        - 'no'
        default: 'no'
      pppoe_account:
        description: "PPPoE Account (if enabled PPPoE):"
        required: false
      pppoe_password:
        description: "PPPoE Password (if enabled PPPoE):"
        required: false

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/sunxi-cortexa7/build.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ inputs.pppoe_account }}" || -z "${{ inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Building sunxi-cortexa7 ImmortalWrt 24.10.0
        run: |
          profiles="${{ github.event.inputs.profile }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          rootfs_partsize="${{ github.event.inputs.rootfs_partsize }}"
          
          IFS=',' read -r -a profile_array <<< "$profiles"
          
          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"
            
            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/sunxi-cortexa7/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/sunxi-cortexa7/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e ROOTFS_PARTSIZE=$rootfs_partsize \
              -e WLAN_NAME=${{ inputs.wlan_name }} \
              -e WLAN_PASSWORD=${{ inputs.wlan_password}} \
              -e ENABLE_PPPOE=${{ inputs.enable_pppoe }} \
              -e PPPOE_ACCOUNT=${{ inputs.pppoe_account }} \
              -e PPPOE_PASSWORD=${{ inputs.pppoe_password }} \
              immortalwrt/imagebuilder:sunxi-cortexa7-openwrt-24.10.0 /bin/bash /home/build/immortalwrt/build.sh
          done

      - name: Generate Firmware SHA-256
        run: |
          cp ${{ github.workspace }}/bin/targets/sunxi/cortexa7/*squashfs-sdcard.img.gz ${{ github.workspace }}
          for file in *.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Upload ImmortalWrt firmware to artifact
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWrt-24.10.0-sunxi-cortexa7-${{ github.event.inputs.profile }}
          path: |
            ${{ github.workspace }}/*.img.gz
            ${{ github.workspace }}/*.sha256
          compression-level: 0
          retention-days: 1
